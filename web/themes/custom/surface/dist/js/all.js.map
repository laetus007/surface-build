{"version":3,"sources":["form-boolean.js","menu-main-second-level.js","menu-main.js","menu-utils.js","message.theme.js","messages.js","search-wide.js","tabs.js"],"names":[],"mappingshGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpfile":"all.js","sourcesContent":["(function (Drupal) {\n  Drupal.theme.checkbox = function () {\n    return '<input type=\"checkbox\" class=\"form-checkbox form-boolean form-boolean--type-checkbox\"/>';\n  };\n})(Drupal);","(function (Drupal) {\n  var isDesktopNav = Drupal.surface.isDesktopNav;\n  var secondLevelNavMenus = document.querySelectorAll('[data-drupal-selector=\"menu__item--has-children\"]');\n\n  function toggleSubNav(topLevelMenuItem, toState) {\n    var buttonSelector = '[data-drupal-selector=\"primary-nav-submenu-toggle-button\"]';\n    var button = topLevelMenuItem.querySelector(buttonSelector);\n    var state = toState !== undefined ? toState : button.getAttribute('aria-expanded') !== 'true';\n\n    if (state) {\n      if (isDesktopNav()) {\n        secondLevelNavMenus.forEach(function (el) {\n          el.querySelector(buttonSelector).setAttribute('aria-expanded', 'false');\n          el.querySelector('[data-drupal-selector=\"menu-main--level-2\"]').classList.remove('is-active-menu-parent');\n          el.querySelector('[data-drupal-selector=\"menu-main--1\"]').classList.remove('is-active-menu-parent');\n        });\n      }\n\n      button.setAttribute('aria-expanded', 'true');\n      topLevelMenuItem.querySelector('[data-drupal-selector=\"menu-main--level-2\"]').classList.add('is-active-menu-parent');\n      topLevelMenuItem.querySelector('[data-drupal-selector=\"menu-main--1\"]').classList.add('is-active-menu-parent');\n    } else {\n      button.setAttribute('aria-expanded', 'false');\n      topLevelMenuItem.classList.remove('is-touch-event');\n      topLevelMenuItem.querySelector('[data-drupal-selector=\"menu-main--level-2\"]').classList.remove('is-active-menu-parent');\n      topLevelMenuItem.querySelector('[data-drupal-selector=\"menu-main--1\"]').classList.remove('is-active-menu-parent');\n    }\n  }\n\n  Drupal.surface.toggleSubNav = toggleSubNav;\n\n  function handleBlur(e) {\n    if (!Drupal.surface.isDesktopNav()) return;\n    setTimeout(function () {\n      var menuParentItem = e.target.closest('[data-drupal-selector=\"menu__item--has-children\"]');\n\n      if (!menuParentItem.contains(document.activeElement)) {\n        toggleSubNav(menuParentItem, false);\n      }\n    }, 200);\n  }\n\n  secondLevelNavMenus.forEach(function (el) {\n    var button = el.querySelector('[data-drupal-selector=\"primary-nav-submenu-toggle-button\"]');\n    button.removeAttribute('aria-hidden');\n    button.removeAttribute('tabindex');\n    el.addEventListener('touchstart', function () {\n      el.classList.add('is-touch-event');\n    }, {\n      passive: true\n    });\n    el.addEventListener('mouseover', function () {\n      if (isDesktopNav() && !el.classList.contains('is-touch-event')) {\n        el.classList.add('is-active-mouseover-event');\n        toggleSubNav(el, true);\n        setTimeout(function () {\n          el.classList.remove('is-active-mouseover-event');\n        }, 500);\n      }\n    });\n    button.addEventListener('click', function () {\n      if (!el.classList.contains('is-active-mouseover-event')) {\n        toggleSubNav(el);\n      }\n    });\n    el.addEventListener('mouseout', function () {\n      if (isDesktopNav() && !document.activeElement.matches('[aria-expanded=\"true\"], .is-active-menu-parent *')) {\n        toggleSubNav(el, false);\n      }\n    });\n    el.addEventListener('blur', handleBlur, true);\n  });\n\n  function closeAllSubNav() {\n    secondLevelNavMenus.forEach(function (el) {\n      if (el.contains(document.activeElement)) {\n        el.querySelector('[data-drupal-selector=\"primary-nav-submenu-toggle-button\"]').focus();\n      }\n\n      toggleSubNav(el, false);\n    });\n  }\n\n  Drupal.surface.closeAllSubNav = closeAllSubNav;\n\n  function areAnySubNavsOpen() {\n    var subNavsAreOpen = false;\n    secondLevelNavMenus.forEach(function (el) {\n      var button = el.querySelector('[data-drupal-selector=\"primary-nav-submenu-toggle-button\"]');\n      var state = button.getAttribute('aria-expanded') === 'true';\n\n      if (state) {\n        subNavsAreOpen = true;\n      }\n    });\n    return subNavsAreOpen;\n  }\n\n  Drupal.surface.areAnySubNavsOpen = areAnySubNavsOpen;\n  document.addEventListener('keyup', function (e) {\n    if (e.key === 'Escape' || e.key === 'Esc') {\n      if (isDesktopNav()) closeAllSubNav();\n    }\n  });\n  document.addEventListener('touchstart', function (e) {\n    if (areAnySubNavsOpen() && !e.target.matches('[data-drupal-selector=\"header-nav\"], [data-drupal-selector=\"header-nav\"] *')) {\n      closeAllSubNav();\n    }\n  }, {\n    passive: true\n  });\n})(Drupal);","(function (Drupal, once, tabbable) {\n  function isNavOpen(navWrapper) {\n    return navWrapper.classList.contains('is-active');\n  }\n\n  function toggleNav(props, state) {\n    var value = !!state;\n    props.navButton.setAttribute('aria-expanded', value);\n\n    if (value) {\n      props.body.classList.add('is-overlay-active');\n      props.navWrapper.classList.add('is-active');\n    } else {\n      props.body.classList.remove('is-overlay-active');\n      props.navWrapper.classList.remove('is-active');\n    }\n  }\n\n  function init(props) {\n    props.navButton.setAttribute('aria-controls', props.navWrapperId);\n    props.navButton.setAttribute('aria-expanded', 'false');\n    props.navButton.addEventListener('click', function () {\n      toggleNav(props, !isNavOpen(props.navWrapper));\n    });\n    document.addEventListener('keyup', function (e) {\n      if (e.key === 'Escape' || e.key === 'Esc') {\n        if (props.surface.areAnySubNavsOpen()) {\n          props.surface.closeAllSubNav();\n        } else {\n          toggleNav(props, false);\n        }\n      }\n    });\n    props.overlay.addEventListener('click', function () {\n      toggleNav(props, false);\n    });\n    props.overlay.addEventListener('touchstart', function () {\n      toggleNav(props, false);\n    });\n    props.header.addEventListener('keydown', function (e) {\n      if (e.key === 'Tab' && isNavOpen(props.navWrapper)) {\n        var tabbableNavElements = tabbable.tabbable(props.navWrapper);\n        tabbableNavElements.unshift(props.navButton);\n        var firstTabbableEl = tabbableNavElements[0];\n        var lastTabbableEl = tabbableNavElements[tabbableNavElements.length - 1];\n\n        if (e.shiftKey) {\n          if (document.activeElement === firstTabbableEl && !props.surface.isDesktopNav()) {\n            lastTabbableEl.focus();\n            e.preventDefault();\n          }\n        } else if (document.activeElement === lastTabbableEl && !props.surface.isDesktopNav()) {\n          firstTabbableEl.focus();\n          e.preventDefault();\n        }\n      }\n    });\n    window.addEventListener('resize', function () {\n      if (props.surface.isDesktopNav()) {\n        toggleNav(props, false);\n        props.body.classList.remove('is-overlay-active');\n      }\n\n      Drupal.surface.closeAllSubNav();\n    });\n    props.navWrapper.addEventListener('click', function (e) {\n      if (e.target.matches(\"[href*=\\\"\".concat(window.location.pathname, \"#\\\"], [href*=\\\"\").concat(window.location.pathname, \"#\\\"] *, [href^=\\\"#\\\"], [href^=\\\"#\\\"] *\"))) {\n        toggleNav(props, false);\n      }\n    });\n  }\n\n  Drupal.behaviors.surfaceNavigation = {\n    attach: function attach(context) {\n      var headerId = 'header';\n      var header = once('navigation', \"#\".concat(headerId), context).shift();\n      var navWrapperId = 'header-nav';\n\n      if (header) {\n        var navWrapper = header.querySelector(\"#\".concat(navWrapperId));\n        var surface = Drupal.surface;\n        var navButton = context.querySelector('[data-drupal-selector=\"mobile-nav__button\"]');\n        var body = context.querySelector('body');\n        var overlay = context.querySelector('[data-drupal-selector=\"header-nav-overlay\"]');\n        init({\n          surface: surface,\n          header: header,\n          navWrapperId: navWrapperId,\n          navWrapper: navWrapper,\n          navButton: navButton,\n          body: body,\n          overlay: overlay\n        });\n      }\n    }\n  };\n})(Drupal, once, tabbable);","(function (Drupal) {\n  Drupal.surface = {};\n\n  function isDesktopNav() {\n    var navButtons = document.querySelector('[data-drupal-selector=\"mobile-nav\"]');\n    return navButtons ? window.getComputedStyle(navButtons).getPropertyValue('display') === 'none' : false;\n  }\n\n  Drupal.surface.isDesktopNav = isDesktopNav;\n  window.addEventListener('load', function (event) {\n    document.body.classList.remove('preload');\n  });\n})(Drupal);","(function (Drupal) {\n  document.addEventListener('click', function (e) {\n    if (e.target && e.target.classList.contains('messages__close')) {\n      const message = e.target.parentNode.parentNode.parentNode;\n      message.classList.add('hidden');\n    }\n  });\n\n  Drupal.theme.message = function (_ref, _ref2) {\n    var text = _ref.text;\n    var type = _ref2.type;\n    var id = _ref2.id;\n    var messagesTypes = Drupal.Message.getMessageTypeLabels();\n    var messageWrapper = document.createElement('div');\n    messageWrapper.setAttribute('class', 'messages messages--'.concat(type));\n    messageWrapper.setAttribute('role', type === 'error' || type === 'warning' ? 'alert' : 'status');\n    messageWrapper.setAttribute('data-drupal-message-id', id);\n    messageWrapper.setAttribute('data-drupal-message-type', type);\n    messageWrapper.setAttribute('aria-label', messagesTypes[type]);\n    messageWrapper.innerHTML = '\\n   <div class=\"messages__container\" data-drupal-selector=\"messages-container\"> \\n' + '<div class=\"messages__header\">\\n      <h2 class=\"visually-hidden\">\\n       ' + messagesTypes[type] + '</h2>\\n      ' + '<div class=\"messages__icon\"></div>\\n   </div> \\n  <div class=\"messages__content\">' + text + '</div>' + '<div class=\"messages__button\"><button type=\"button\" class=\"messages__close\"> <span class=\"visually-hidden\">Close message</span>' + '</button></div></div>';\n    return messageWrapper;\n  };\n})(Drupal);","!function (Drupal) {\n  'use strict';\n\n  Drupal.behaviors.messages = {\n    attach: function attach(context) {\n      const messages = context.querySelectorAll('.messages__close'); // Close messages\n\n      messages.forEach(message => {\n        message.addEventListener('click', e => {\n          this.closeMessage(e);\n        });\n      });\n    },\n\n    closeMessage(e) {\n      const message = e.target.parentNode.parentNode.parentNode;\n      message.classList.add('hidden');\n    }\n\n  };\n}(Drupal);","(function (Drupal) {\n  var searchWide = document.querySelector('[data-drupal-selector=\"search-wide\"]');\n  var searchWideButton = document.querySelector('[data-drupal-selector=\"search-wide-button\"]');\n  var searchWideWrapper = document.querySelector('[data-drupal-selector=\"search-wide-wrapper\"]');\n\n  function searchIsVisible() {\n    return searchWideWrapper.classList.contains('is-active');\n  }\n\n  Drupal.surface.searchIsVisible = searchIsVisible;\n\n  function handleFocus() {\n    if (searchIsVisible()) {\n      searchWideWrapper.querySelector('input[type=\"search\"]').focus();\n    } else if (searchWideWrapper.contains(document.activeElement)) {\n      searchWideButton.focus();\n    }\n  }\n\n  function toggleSearchVisibility(visibility) {\n    searchWideButton.setAttribute('aria-expanded', visibility === true);\n    searchWideWrapper.addEventListener('transitionend', handleFocus, {\n      once: true\n    });\n\n    if (visibility === true) {\n      Drupal.surface.closeAllSubNav();\n      searchWideWrapper.classList.add('is-active');\n    } else {\n      searchWideWrapper.classList.remove('is-active');\n    }\n  }\n\n  Drupal.surface.toggleSearchVisibility = toggleSearchVisibility;\n  document.addEventListener('keyup', function (e) {\n    if (e.key === 'Escape' || e.key === 'Esc') {\n      toggleSearchVisibility(false);\n    }\n  });\n\n  if (searchWideButton) {\n    searchWideButton.addEventListener('click', function () {\n      toggleSearchVisibility(!searchIsVisible());\n    });\n  }\n\n  Drupal.behaviors.searchWide = {\n    attach: function attach(context) {\n      var searchWideButton = once('search-wide', '[data-drupal-selector=\"search-wide-button\"]', context).shift();\n\n      if (searchWideButton) {\n        searchWideButton.setAttribute('aria-expanded', 'false');\n      }\n    }\n  };\n\n  if (searchWide) {\n    searchWide.addEventListener('focusout', function (e) {\n      if (!e.currentTarget.contains(e.relatedTarget)) {\n        toggleSearchVisibility(false);\n      }\n    });\n  }\n})(Drupal);","(function (Drupal, once) {\n  function init(el) {\n    var tabs = el.querySelector('.tabs');\n    var expandedClass = 'is-expanded';\n    var activeTab = tabs.querySelector('.is-active');\n\n    function isTabsMobileLayout() {\n      return tabs.querySelector('.tabs__trigger').clientHeight > 0;\n    }\n\n    function handleTriggerClick(e) {\n      if (!tabs.classList.contains(expandedClass)) {\n        e.currentTarget.setAttribute('aria-expanded', 'true');\n        tabs.classList.add(expandedClass);\n      } else {\n        e.currentTarget.setAttribute('aria-expanded', 'false');\n        tabs.classList.remove(expandedClass);\n      }\n    }\n\n    if (isTabsMobileLayout() && !activeTab.matches('.tabs__tab:first-child')) {\n      var newActiveTab = activeTab.cloneNode(true);\n      var firstTab = tabs.querySelector('.tabs__tab:first-child');\n      tabs.insertBefore(newActiveTab, firstTab);\n      tabs.removeChild(activeTab);\n    }\n\n    tabs.querySelector('.tabs__trigger').addEventListener('click', handleTriggerClick);\n  }\n\n  Drupal.behaviors.primaryTabs = {\n    attach: function attach(context) {\n      once('surface-tabs', '[data-drupal-nav-primary-tabs]', context).forEach(init);\n    }\n  };\n})(Drupal, once);"]}